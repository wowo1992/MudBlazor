@using System;
@using System.Collections.Generic;
@using System.Collections.Specialized;
@using System.Diagnostics.CodeAnalysis;
@using System.Globalization;
@using System.Linq;
@using System.Reflection;
@using System.Text.Json;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using MudBlazor.Utilities;

@typeparam T

<MudDialog Options="EditDialogOptions">
	<TitleContent>
		<MudText Typo="Typo.h6">
			Edit
		</MudText>
	</TitleContent>
	<DialogContent>
		<MudForm FieldChanged="FormFieldChanged">
			@foreach (var column in RenderedColumns)
			{
                var cell = new Cell<T>(GridInstance, column, EditingItem);

                if (column.EditTemplate != null)
				{
					@column.EditTemplate(cell.cellContext)
				}
				else
				{
					if (column.dataType == typeof(string))
					{
						<MudTextField T="string" Label="@column.computedTitle" Value="@cell.valueString" ValueChanged="@cell.StringValueChangedAsync" Margin="@Margin.Dense"
							Required="true" Variant="@Variant.Outlined" Disabled="@(!column.IsEditable || ReadOnly)" Class="mt-4" />
					}
					else if (column.isNumber)
					{
						<MudNumericField T="double?" Label="@column.computedTitle" Value="@cell.valueNumber" ValueChanged="@cell.NumberValueChangedAsync" Margin="@Margin.Dense"
							Required="true" Variant="@Variant.Outlined" Disabled="@(!column.IsEditable || ReadOnly)" Class="mt-4" />
					}
				}
			}
		</MudForm>
	</DialogContent>
	<DialogActions>
		<MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="@CancelEditingItemAsync" Class="px-10">Cancel</MudButton>
		<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@CommitItemChangesAsync" Class="px-10">Save</MudButton>
	</DialogActions>
</MudDialog>

@code {
    [Parameter] public DialogOptions EditDialogOptions { get; set; }

    [Parameter] public EventCallback<FormFieldChangedEventArgs> FormFieldChanged { get; set; }

    [Parameter] public List<Column<T>> RenderedColumns { get; set; }

    [Parameter] public EventCallback CancelEditingItemAsync { get; set; }

    [Parameter] public EventCallback CommitItemChangesAsync { get; set; }

    [Parameter] public bool ReadOnly { get; set; } = true;

    [Parameter] public T EditingItem { get; set; }

    [Parameter] public MudDataGrid<T> GridInstance { get; set; }
}
